name: (tModLoader) Check for new releases

on:
  workflow_dispatch:
  schedule:
    - cron: '0 2 * * *'
  push:

jobs:
  # Keep-alive was Removed. Will need to find some other solution.
  # keep-alive:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Keepalive
  #       uses: gautamkrishnar/keepalive-workflow@v1

  check:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1
      matrix:
        year: [ 2025 ]
        type: [ release, prerelease ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create json fragment
        uses: 1arp/create-a-file-action@0.4.5
        with:
          file: "${{ matrix.year }}-${{ matrix.type }}.json"
          content: "{}"

      - name: Get releases (${{ matrix.year }} ${{ matrix.type }})
        id: get_releases
        run: |
          YEAR="${{ matrix.year }}"
          TYPE="${{ matrix.type }}"

          curl -s https://api.github.com/repos/tModLoader/tModLoader/releases > output.txt
          if [ "$TYPE" == "prerelease" ]; then
            VERSION=$(jq -r '[.[] | select(.tag_name | contains("'"${YEAR}"'")) | select(.prerelease == true)] | max_by(.created_at) | .tag_name | sub("^v";"")' output.txt)
          else
            VERSION=$(jq -r '[.[] | select(.tag_name | contains("'"${YEAR}"'")) | select(.prerelease == false)] | max_by(.created_at) | .tag_name | sub("^v";"")' output.txt)
          fi

          UPSTREAM=$(curl -s "https://hub.docker.com/v2/repositories/passivelemon/terraria-docker/tags/tmodloader-${VERSION}")

          if echo "$UPSTREAM" | jq -e ".digest" > /dev/null; then
            echo "Latest $YEAR $TYPE ($VERSION) is already published." >> "$GITHUB_STEP_SUMMARY"
            echo "VERSION=false" >> "$GITHUB_ENV"
          else
            echo "Latest $YEAR $TYPE ($VERSION) is not already published." >> "$GITHUB_STEP_SUMMARY"
            echo "VERSION=$VERSION" >> "$GITHUB_ENV"
          fi

      - name: Write json fragment
        uses: amochkin/action-json@v1
        with:
          file: "${{ matrix.year }}-${{ matrix.type }}.json"
          mode: write
          property: "year.${{ matrix.year }}.type.${{ matrix.type }}"
          value: "${{ env.VERSION }}"

      - name: Upload json fragment
        uses: actions/upload-artifact@v4
        with:
          name: "${{ matrix.year }}-${{ matrix.type }}"
          path: "${{ matrix.year }}-${{ matrix.type }}.json"

  data_handler:
    needs: check
    runs-on: ubuntu-latest
    outputs:
      data: ${{ steps.write_output.outputs.data }}
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: output/

      - name: Merge json fragments
        run: |
          jq -sc 'reduce .[] as $item ({}; . * $item)' output/*/*.json > final-data.json

      - name: Upload final-data.json
        uses: actions/upload-artifact@v4
        with:
          name: final-data
          path: final-data.json

      - name: Write final-data.json to output
        id: write_output
        shell: python
        run: |
          #!/usr/bin/env python3

          import os
          import json

          GITHUB_OUTPUT = os.getenv('GITHUB_OUTPUT')

          with open('final-data.json', 'r') as data_file:
            data = json.load(data_file)

          with open(GITHUB_OUTPUT, 'w') as output_file:
            escaped_data = json.dumps(data).replace('"', '\"')
            output_file.write(f'data={escaped_data}')

  publish:
    needs: data_handler
    strategy:
      matrix:
        year: [ 2025 ]
        type: [ release, prerelease ]
    uses: PassiveLemon/terraria-docker/.github/workflows/tmodloader-publish.yml@master
    # uses: ./.github/workflows/tmodloader-publish.yml # for local testing
    secrets: inherit
    with:
      version: ${{ fromJson(needs.data_handler.outputs.data).year[matrix.year].type[matrix.type] }}
      year: ${{ matrix.year }}
      type: ${{ matrix.type }}

